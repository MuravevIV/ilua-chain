local chain = require("chain")

describe("Chain:pageSlice()", function()

    it("should return the correct slice for the first page", function()
        chain({ 1, 2, 3, 4, 5, 6, 7 })
            :pageSlice(3, 1)
            :values():assertEquals({ 1, 2, 3 })
    end)

    it("should return the correct slice for the second page", function()
        chain({ 1, 2, 3, 4, 5, 6, 7 })
            :pageSlice(3, 2)
            :values():assertEquals({ 4, 5, 6 })
    end)

    it("should return the correct slice for the last partial page", function()
        chain({ 1, 2, 3, 4, 5, 6, 7 })
            :pageSlice(3, 3)
            :values():assertEquals({ 7 })
    end)

    it("should work correctly with Dict", function()
        chain({ a = 1, b = 2, c = 3, d = 4, e = 5, f = 6, g = 7 })
            :pageSlice(3, 2)
            :assertEquals({ d = 4, e = 5, f = 6 })
            :values():assertEquals({ 4, 5, 6 })
    end)

    it("should return an empty slice when pageNum is out of range", function()
        chain({ 1, 2, 3, 4, 5, 6, 7 })
            :pageSlice(3, 4)
            :values():assertEquals({})
    end)

    it("should return an empty slice if itemsPerPage <= 0", function()
        chain({ 1, 2, 3, 4, 5, 6, 7 })
            :pageSlice(-3, 1)
            :values():assertEquals({})
    end)

    it("should return an empty slice if pageNum < 1", function()
        chain({ 1, 2, 3, 4, 5, 6, 7 })
            :pageSlice(3, 0)
            :values():assertEquals({})
    end)

    it("should handle empty collections correctly", function()
        chain({})
            :pageSlice(3, 1)
            :values():assertEquals({})
    end)

    it("should throw error when itemsPerPage is not an integer", function()
        expect(function()
            chain({ 1, 2, 3, 4 }):pageSlice(2.5, 1)
        end).to.fail("itemsPerPage must be an integer (got a non-integer number: 2.5)")
    end)

    it("should throw error when pageNum is not an integer", function()
        expect(function()
            chain({ 1, 2, 3 }):pageSlice(2, 1.5)
        end).to.fail("pageNum must be an integer (got a non-integer number: 1.5)")
    end)
end)
