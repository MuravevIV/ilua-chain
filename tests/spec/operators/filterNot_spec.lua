local chain = require("chain")

describe("Chain:filterNot()", function()

    it("should filterN List elements based on a predicate function", function()
        chain({10, 20, 30, 40})
            :filterNot(function(v) return v % 20 ~= 0 end)
            :values():assertEquals({20, 40})
    end)

    it("should filter Dict elements based on a predicate function", function()
        chain({a = 10, b = 20, c = 30, d = 40})
            :filterNot(function(v) return v % 20 ~= 0 end)
            :assertEquals({b = 20, d = 40})
    end)

    it("should pass key to the predicate function", function()
        chain({a = 10, b = 20, c = 30, d = 40})
            :filterNot(function(v, k) return v < 15 or k == "d" end)
            :assertEquals({b = 20, c = 30})
    end)

    it("should pass key and index to the predicate function", function()
        chain({a = 10, b = 20, c = 30, d = 40})
            :filterNot(function(v, k, idx) return v < 15 or k == "d" or idx == 3 end)
            :assertEquals({b = 20})
    end)

    it("should return an empty chain if no elements match the predicate", function()
        chain({1, 3, 5})
            :filterNot(function(v) return v % 2 == 1 end)
            :values():assertEquals({})
    end)

    it("should return an empty chain if the input chain is empty", function()
        chain({})
            :filterNot(function(v) return v % 2 == 0 end)
            :assertEquals({})
    end)

    it("should preserve the original order of elements that pass the filterNot", function()
        chain({5, 2, 8, 1, 4, 7})
            :filterNot(function(v) return v < 3 end)
            :values():assertEquals({5, 8, 4, 7})
    end)

    it("should throw an error when predicate is not a function", function()
        expect(function()
            chain({}):filterNot()
        end).to.fail("filterNot(pred): pred must be a function (got nil)")
        expect(function()
            chain({}):filterNot(-1)
        end).to.fail("filterNot(pred): pred must be a function (got number: -1)")
        expect(function()
            chain({}):filterNot("not_a_function")
        end).to.fail("filterNot(pred): pred must be a function (got string: 'not_a_function')")
    end)
end)
